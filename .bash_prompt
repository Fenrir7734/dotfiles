#!/usr/bin/env bash

# Inspired by:
# @necolas's prompt: https://github.com/necolas/dotfiles
# @mathiasabynens prompt: https://github.com/mathiasbynens/dotfiles
# solarized colors: https://github.com/altercation/solarized/tree/master/iterm2-colors-solarized#the-values

# prompt_git() function by:
# @necolas https://github.com/necolas/dotfiles/blob/986157a70a595fdbee540f06a491a68b339a9b00/shell/bash_prompt#L14

solarized=yes

prompt_git() {
    local s=""
    local branchName=""

    # check if the current directory is in a git repository
    if [ $(git rev-parse --is-inside-work-tree &>/dev/null; printf "%s" $?) == 0 ]; then

        # check if the current directory is in .git before running git checks
        if [ "$(git rev-parse --is-inside-git-dir 2> /dev/null)" == "false" ]; then

            # ensure index is up to date
            git update-index --really-refresh  -q &>/dev/null

            # check for uncommitted changes in the index
            if ! $(git diff --quiet --ignore-submodules --cached); then
                s="$s+";
            fi

            # check for unstaged changes
            if ! $(git diff-files --quiet --ignore-submodules --); then
                s="$s!";
            fi

            # check for untracked files
            if [ -n "$(git ls-files --others --exclude-standard)" ]; then
                s="$s?";
            fi

            # check for stashed files
            if $(git rev-parse --verify refs/stash &>/dev/null); then
                s="$s$";
            fi

        fi

        # get the short symbolic ref
        # if HEAD isn't a symbolic ref, get the short SHA
        # otherwise, just give up
        branchName="$(git symbolic-ref --quiet --short HEAD 2> /dev/null || \
                      git rev-parse --short HEAD 2> /dev/null || \
                      printf "(unknown)")"

        [ -n "$s" ] && s=" [$s]"

        printf "%s" "$1$branchName$s"
    else
        return
    fi
}

if [ "$solarized" = yes ] && [ -x /usr/bin/tput ] && tput setaf 1 &> /dev/null; then
	tput sgr0
	reset=$(tput sgr0);
	bold=$(tput bold);
	black=$(tput setaf 0);
	blue=$(tput setaf 33);
        cyan=$(tput setaf 37);
        green=$(tput setaf 64);
        orange=$(tput setaf 166);
        purple=$(tput setaf 125);
        red=$(tput setaf 124);
        white=$(tput setaf 15);
        yellow=$(tput setaf 136);
else
	reset="\e[0m";
	bold="";
	black="\e[1;30m";
	red="\e[1;31m";
	green="\e[1;32m";
	yellow="\e[1;33m";
	blue="\e[1;34m";
	purple="\e[1;35m";
	cyan="\e[1;36m";
	white="\e[1;37m";
fi;

PS1="\[${bold}\]\n";
PS1+="\[${orange}\]\u";
PS1+="\[${white}\] at ";
PS1+="\[${yellow}\]\h";
PS1+="\[${white}\] on ";
PS1+="\[${green}\]\w";
PS1+="\$(prompt_git \"\[${white}\] on \[${cyan}\]\")";
PS1+="\n";
PS1+="\[${white}\]\$ ";
PS1+="\[${reset}\]";

